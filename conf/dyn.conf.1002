user  root;
worker_processes 2;
daemon off;
error_log stderr info;
#backtrace_log /var/log/nginx/coredump.log;

pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
	lua_code_cache off;
	lua_package_path '/home/github/tengcdn/lualib/?.lua;;';
	lua_package_cpath '/home/github/tengcdn/lualib/?.so;;';
    lua_shared_dict itesty_limit 100k;
    lua_shared_dict ip_whitelist 10m;
    lua_shared_dict ip_blacklist 10m;
    lua_shared_dict req_metrics 10m;	
    lua_shared_dict req_iplist 10m;	    
	access_by_lua_file /home/github/tengcdn/lualib/cdn/access.lua;
    
    init_by_lua_block {
		local config = require "cdn.config"
		config:set("log.status", true)
		config:set("log.level", 1)
		
		local logger = require "resty.logger"
		local log = logger:open("/tmp/cdn.log")
		log:set_level(0)
		config:set("log.file", log)
    }
        
    server {
        listen 82;
        location / {
            return 200 "82";
        }
    }
        
    server {
        listen 81;
        location / {

			content_by_lua_block {
                local logger = require "resty.logger"
                local buss1 = logger:open("/tmp/a/a/a/cdn.log")
                --buss1:set_level(logger.INFO)
                buss1:info("hello world")
				ngx.say("ngx.DEBUG=", ngx.DEBUG, "ngx.INFO=", ngx.INFO, "ngx.NOTICE=", ngx.NOTICE, "ngx.WARN=", ngx.WARN, "ngx.ERR=", ngx.ERR)
			}
        }
        
        location /test {
        	access_by_lua_block {
        		local config = require "cdn.config"
        		config:set("test", "miss me !")
        	}
	        content_by_lua_block {
	        	local log = require "cdn.log"
	        	log:info("info")
	        	log:debug("debug")
	        	log:error("error")
	        	local config = require "cdn.config"
	        	ngx.say(config:get("test"))
	        }
        }
        
        location /limit {
			access_by_lua_block {
				local limits = require("resty.iresty_limits")
				local limits = limits.new()

				-- the rate is 80bytes/seconds, you can input 80K(means 80KB/sec) too.
				limits:rate("0")

				-- 
				ngx.say("check request is allowed: ", 
					limits:reqs_per_range(ngx.var.binary_remote_addr, ngx.var.uri, 1, 2))
			}        
        }
    }
}
