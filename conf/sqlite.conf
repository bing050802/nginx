user  root;
worker_processes 1;
daemon off;
error_log stderr error;

pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
	lua_code_cache on;
	lua_package_path '/home/github/tengcdn/lualib/?.lua;;';
	lua_package_cpath '/home/github/tengcdn/lualib/?.so;;';
    lua_shared_dict itesty_limit 100k;
    lua_shared_dict ip_blacklist 10m;
    lua_shared_dict ip_whitelist 10m;
    lua_shared_dict req_metrics 10m;	
    lua_shared_dict req_iplist 10m;
    
    lua_shared_dict wsettings 10m;
    lua_shared_dict upstream_cached 10m;
    lua_shared_dict upstreams 10m;
    
    lua_shared_dict settings 10m;
    lua_shared_dict cached 10m;
    lua_shared_dict locked 100k;
    
    init_by_lua_block {
		local config = require "cdn.config"
		config:set("log.status", true)
		config:set("log.level", 1)
		
		local logger = require "resty.logger"
		local log = logger:open("/tmp/cdn.log")
		log:set_level(0)
		config:set("log.file", log)
		config:set("db.file", "/home/millken/rqlite/node.2/db.sqlite3")
		config:set("db.tld", "/home/millken/qbox_sync/shell/eltd/effective_tld_names.dat")
		t = require "cdn.tlds"
    }
    	
    init_worker_by_lua_block {
    	local worker = require "cdn.worker"
    	worker:start({
        	interval = 3,
    	})
    }
        	    

	
	upstream host2 {
		server 127.0.0.1:81; server 127.0.0.1:82;
	}
	
    server {
        listen 80;
        set $ups "";
		location / {
            proxy_pass http://$ups;
			access_by_lua_block {
				require "cdn.access"
			}
	
			rewrite_by_lua_block {
				local worker = require "cdn.worker"
				worker:rewrite()
			}            
        }    
        location @dyup_init {
        	dyups_interface;
    	}            
    }
    server {
        listen 82;
        location / {
            return 200 "82";
        }
    }
        
    server {
        listen 81;

    	
        location / {
			return 200 "81";
        }
        location /t1 {
			content_by_lua_block {
				
				ngx.say(t:domain("aasdf.asdfsd.com.cn"))
			}        
        }
        
        location /t2 {
			content_by_lua_block {
				local s = "1.2.com.cn"
				local i1 = 1
				local re = "%."
				 while true do
				 	i3 = i1
					local i2 = s:find(re, i1)
					if not i2 then
						break
					end
					i1 = i2 + 1
					ngx.say( "i2=", i2, "i3=", s:sub(i3, i2-1) , "   ", s:sub(i1))
					
				end
			}         
        }
        
        location /test {
			content_by_lua_block {
				local test = require "cdn.test"
				test.version()
				ngx.say("done")
			} 
        }

    }
}
