user  root;
worker_processes 1;
daemon off;
error_log /var/log/nginx/error.log debug;
backtrace_log /var/log/nginx/coredump.log;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
	lua_code_cache off;
	lua_package_path '/home/github/tengcdn/lualib/?.lua;;';
	lua_package_cpath '/home/github/tengcdn/lualib/?.so;;';

	lua_shared_dict blocked_iplist 5m;
    lua_shared_dict settings 5m;
    lua_shared_dict wsettings 5m;
    lua_shared_dict locked 1m;
    lua_shared_dict listener_init 1m;
    
    dyups_read_msg_timeout 3;

    access_log off;
    log_not_found off;

    server_tokens off;
    sendfile on; 
    tcp_nopush on; 
    tcp_nodelay on;
    autoindex off;   
    #keepalive_timeout  10;    
    #keepalive_timeout  20;    
    client_header_timeout 10; 
    client_body_timeout 10; 
    reset_timedout_connection on; 
    send_timeout 10; 
            
    #gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    open_file_cache max=102400 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 1;
        
    proxy_http_version 1.1;
    proxy_connect_timeout 15s;
    proxy_read_timeout 600;
    proxy_send_timeout 600;
    proxy_buffer_size 128k;
    proxy_buffers 4 128k;
    proxy_busy_buffers_size 256k;
    proxy_temp_file_write_size  100m;
    proxy_ignore_client_abort on;
            
    #proxy_bind $server_addr;
    proxy_headers_hash_max_size 1024;
    proxy_headers_hash_bucket_size 128;
            

	proxy_cache pcache;                         # proxy_cache must here
    proxy_cache_key $scheme://$hostgroup$uri$is_args$args;     # proxy_cache_key must here            
    add_header  X-Cache "$upstream_cache_status from DYN";
    more_clear_headers 'Server';
    proxy_cache_path  /data/proxy_cache  levels=1:2   keys_zone=pcache:200m inactive=1d max_size=30g use_temp_path=off inactive=180m;
    proxy_cache_lock on;
    proxy_cache_min_uses 3;
    proxy_cache_revalidate on;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $remote_addr; 
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    	
    proxy_intercept_errors on;
    proxy_redirect off;
    proxy_set_header Referer $http_referer;
        
	client_max_body_size 100M;
	client_body_buffer_size 32k;
	error_page 500 501 502 503 504 @fallback;	
	
    lua_socket_log_errors off;

    access_by_lua '
        local blocks = ngx.shared.blocked_iplist;
        if (blocks:get(ngx.var.remote_addr)~=nil) then
            if (blocks:get(ngx.var.remote_addr) >= ngx.now()) then
                ngx.exit(444)
            end
        end
		local key = ngx.var.http_user_agent
        if not key then
            ngx.exit(400)
        end        
    ';
       
    init_by_lua_block {
        local lrucache = require "resty.lrucache"
        cjson = require "cjson"
        cache = lrucache.new(200)
        if not cache then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
        end
    }
           
    init_worker_by_lua '
        set_config = function(hostname,sett)
        	ngx.log(ngx.DEBUG,"sett" .. sett)
            local dyups = require "ngx.dyups"
            local cjson = require "cjson"
            local dopairs = pairs
            local tmpkv = {}
            local gsett = cjson.decode(sett)
            if gsett ~= nil then
		        for k,v in dopairs(gsett) do
		            if (k=="upstream") then
		                local status,rv = dyups.update(hostname, v)
		                ngx.log(ngx.DEBUG,"-----" ..hostname.. "------")
		                ngx.log(ngx.DEBUG,status)
		            elseif k=="server_type" then
		                if v==1 then
		                    ngx.log(ngx.DEBUG,"got a wildcard domain set")
		                    ngx.shared.wsettings:set(gsett["wildname"],hostname)
		                end
		            else
		                tmpkv[k]=v
		            end
		        end
            	ngx.shared.settings:set(hostname,cjson.encode(tmpkv))
            else
            	ngx.log(ngx.ERR, "get sett empty")
            end
            
        end
        load_config = function(premature)
            if ngx.shared.locked:get("locked")~=1 then
                ngx.shared.locked:set("locked",1)
                
                ngx.log(ngx.DEBUG,"read configures by stand alone. "..ngx.worker.pid())
                local redis = require "resty.redis"
                local red = redis:new()
                local ok,err = red:connect("127.0.0.1",6379)
                if not ok then
                    ngx.log(ngx.ERR,err)
                end
                -- add configs from redis to shm
                ngx.log(ngx.DEBUG,"connected to redis done")
                local sites = red:keys("site_*")
                if sites then
                    for _,host in ipairs(sites) do
                        local hostname = string.sub(host,6)
                        local sett = red:get(host)
                        set_config(hostname,sett)
                    end
                end
                ngx.log(ngx.DEBUG,"-----conf done-----")
                ngx.timer.at(0,unlock_lock) -- will be unlock setting lock in 1 sec
                if ngx.shared.listener_init:get("started")~=1 then
                    listen_looper()
                end
            end
        end
        listen_looper = function()
            ngx.shared.listener_init:set("started",1)
            while true do
                local stat,err = listen_config()
                if err then
                end
            end
        end
        unlock_lock = function(p)
            ngx.shared.locked:set("locked",0)
        end
        listen_config = function()
            local cjson = require "cjson"
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeout(60000)
            local ok,err = red:connect("127.0.0.1",6379)
            if not ok then
                ngx.log(ngx.ERR,err)
            end
            red:subscribe("ngx.ConfigEvent")
            while true do
                local msg, err = red:read_reply()
                if not msg then
                    return ngx.log(ngx.ERR,"ERR:"..err)
                end
                ngx.log(ngx.DEBUG, "redis reply: " .. cjson.encode(msg))
                tmsg = cjson.decode(msg[3])
                hostname = tmsg["hostname"]
                sett = tmsg["sett"]
                set_config(hostname,cjson.encode(sett))
            end
            return true
        end
        if ngx.worker.id ~= 0 then 
        	ngx.timer.at(0, load_config)
        end
    ';       
	server {
		listen 8001;
		listen 80;
		#server_name ~^(www\.)(?<domain>.+)$;
		#server_name ~(?<domain>.+)$;
		
		
		location @dyup_init {
        	dyups_interface;
    	}	
    	
		location @fallback {
				default_type text/html;
				return 200 "<html><head>
		<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>
		<title>something error</title>
		</head><body><div id='main' style='display:none'></div><script language='javascript'>var referer = escape(document.referrer);var url = escape(document.URL);
		document.write('<scr'+'ipt language=\"javascript\" src=\"http://error.cdn.dev/?code=$status&url=' +  url + '&referer=' + referer + '\"></scr' + 'ipt>');
		</script><!-- Generated by nginx padding for ie --><!-- padding for ie --><!-- padding for ie --><!-- padding for ie --></body></html>";
		}
    		
		location / {
		    set $gzip_flag "on";
		    set $hostgroup "";
		    set $proxy_cache_key $scheme://$hostgroup$uri$is_args$args;
		    set $proxy_no_cache 0;
            
		    rewrite_by_lua '
		        local cjson = require "cjson"
		        local settings = ngx.shared.settings
		        local wildlist = ngx.shared.wsettings
		        local sets = {}
		        if (settings:get(ngx.var.host)==nil) then

		            for _, k in pairs(wildlist:get_keys()) do
		                local from, to, err = ngx.re.find(ngx.var.host,k)
		                if from then
		                    ngx.var.hostgroup = wildlist:get(k)
		                    sets = cjson.decode(settings:get(ngx.var.hostgroup))
		                else
		                    if err then
		                        ngx.log(ngx.ERR,"Match ERR! "..err)
		                    end
		                    ngx.exit(404)
		                end
		            end

		        else
		            ngx.var.hostgroup = ngx.var.host
		            sets = cjson.decode(settings:get(ngx.var.host))
		        end

		        if (sets["gzip"]=="off") then
		            ngx.var.gzip_flag = "off"
		        end
		        ngx.var.proxy_cache_key = ngx.var.uri;
		        ngx.var.proxy_no_cache = 1;
		        ngx.log(ngx.DEBUG, "proxy_cache_key = ".. ngx.var.proxy_cache_key);
		    ';


		     if ( $gzip_flag = "off" ) { gzip off; }

		     proxy_pass http://$hostgroup;
		     proxy_cache_key $proxy_cache_key;
		     #proxy_no_cache $proxy_no_cache;
   		     #proxy_cache_bypass $proxy_no_cache;
		     #proxy_cache_valid  200 304 30s;
		     #proxy_set_header X-Forwarded-For  $remote_addr;
		     
            header_filter_by_lua '
               local http_cache = require "http_cache"
               local cache_status = (ngx.var.upstream_cache_status or "")

               if cache_status == "MISS" or cache_status == "EXPIRED" then
                   local cache_data = http_cache.get_metadata()
                   local new_expire = ngx.time() + 60

                   if cache_data and cache_data["valid_sec"] then
                       http_cache.set_metadata({ valid_sec = new_expire,
                                                 fcn = { valid_sec = new_expire,
                                                     expire = new_expire } })
                   end
               end
            ';		     
		}
	}
}
