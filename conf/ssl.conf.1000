user  root;
worker_processes 1;
daemon off;
error_log stderr info;

pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
	lua_code_cache off;
	lua_package_path '/home/github/tengcdn/lualib/?.lua;;';
	lua_package_cpath '/home/github/tengcdn/lualib/?.so;;';
	lua_shared_dict my_locks 100k;

    upstream test {
	server 127.0.0.1:81; server 127.0.0.1:82;
    }
    server {
        listen 82;
        location / {
            return 200 "82";
        }
    }
        
    server {
        listen 81;
        location / {
	    return 200 "81";
        }
    }
    server {
        listen 0.0.0.0:3129 ssl;

        server_name _;

        ssl on;
        ssl_session_cache  builtin:1000  shared:SSL:10m;
        ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
        ssl_prefer_server_ciphers on;

        lua_ssl_trusted_certificate "/home/github/tengcdn/conf/ssl/rootCA.pem";
        ssl_certificate /home/github/tengcdn/conf/ssl/test.crt;
        ssl_certificate_key /home/github/tengcdn/conf/ssl/test.key;

        ssl_certificate_by_lua_block {
            local ssl = require "ngx.ssl"
            ssl.clear_certs()
            local server_name = ssl.server_name()
            local addr, addrtyp, err = ssl.raw_server_addr()
            local byte = string.byte
            local cert_path = ""

            ssl.clear_certs()

            -- Check for SNI request.
            if server_name == nil then
                ngx.log(ngx.INFO, "SNI Not present - performing IP lookup")
                
                -- Set server name as IP address.
                server_name = string.format("%d.%d.%d.%d", byte(addr, 1), byte(addr, 2), byte(addr, 3), byte(addr, 4))
                ngx.log(ngx.INFO, "IP Address: ", server_name)
            end 
            ngx.log(ngx.INFO, "server_name :", server_name)
            local key_data = nil;
            local f = io.open(string.format("/home/github/tengcdn/conf/ssl/%s.key", server_name), "r")
            if f then
                key_data = f:read("*a")
                f:close()
            end
            local cert_data = nil;
            local f = io.open(string.format("/home/github/tengcdn/conf/ssl/%s.crt", server_name), "r")
            if f then
                cert_data = f:read("*a")
                f:close()
            end
            if key_data and cert_data then
                local ok, err = ssl.set_der_priv_key(key_data)
                if not ok then
                    ngx.log(ngx.ERR, "failed to set DER priv key: ", err)
                    return
                end
				cert_data, err = ssl.cert_pem_to_der(cert_data)
				if not cert_data then
				    ngx.log(ngx.ERR, "failed to convert pem cert to der cert: ", err)
				    return
				end
				local ok, err = ssl.set_der_cert(cert_data)
				if not ok then
				    ngx.log(ngx.ERR, "failed to set DER cert: ", err)
				    return
				end
                return
            end             
        }

        lua_need_request_body on;

        client_max_body_size 100k;
        client_body_buffer_size 100k;

        server_tokens off;
        location / {
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            proxy_pass_header Server;
            proxy_pass http://test;
        }
    }
}